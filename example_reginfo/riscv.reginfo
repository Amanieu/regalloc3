; Generated by regalloc3-tool, do not edit manually
; Re-generate with: cargo run -p regalloc3-tool -- example-reginfo -f 8 riscv

r0 = reg nonallocatable ; zero
r1 = reg unit0 ; ra
r2 = reg nonallocatable ; sp
r3 = reg nonallocatable ; gp
r4 = reg nonallocatable ; tp
r5 = reg unit1 ; x5
r6 = reg unit2 ; x6
r7 = reg unit3 ; x7
r8 = reg unit4 ; x8
r9 = reg unit5 ; x9
r10 = reg unit6 ; x10
r11 = reg unit7 ; x11
r12 = reg unit8 ; x12
r13 = reg unit9 ; x13
r14 = reg unit10 ; x14
r15 = reg unit11 ; x15
r16 = reg unit12 ; x16
r17 = reg unit13 ; x17
r18 = reg unit14 ; x18
r19 = reg unit15 ; x19
r20 = reg unit16 ; x20
r21 = reg unit17 ; x21
r22 = reg unit18 ; x22
r23 = reg unit19 ; x23
r24 = reg unit20 ; x24
r25 = reg unit21 ; x25
r26 = reg unit22 ; x26
r27 = reg unit23 ; x27
r28 = reg unit24 ; x28
r29 = reg unit25 ; x29
r30 = reg unit26 ; x30
r31 = reg unit27 ; x31
r32 = stack unit28 ; int_stack0
r33 = stack unit29 ; int_stack1
r34 = stack unit30 ; int_stack2
r35 = stack unit31 ; int_stack3
r36 = stack unit32 ; int_stack4
r37 = stack unit33 ; int_stack5
r38 = stack unit34 ; int_stack6
r39 = stack unit35 ; int_stack7
r40 = reg unit36 ; f0
r41 = reg unit37 ; f1
r42 = reg unit38 ; f2
r43 = reg unit39 ; f3
r44 = reg unit40 ; f4
r45 = reg unit41 ; f5
r46 = reg unit42 ; f6
r47 = reg unit43 ; f7
r48 = reg unit44 ; f8
r49 = reg unit45 ; f9
r50 = reg unit46 ; f10
r51 = reg unit47 ; f11
r52 = reg unit48 ; f12
r53 = reg unit49 ; f13
r54 = reg unit50 ; f14
r55 = reg unit51 ; f15
r56 = reg unit52 ; f16
r57 = reg unit53 ; f17
r58 = reg unit54 ; f18
r59 = reg unit55 ; f19
r60 = reg unit56 ; f20
r61 = reg unit57 ; f21
r62 = reg unit58 ; f22
r63 = reg unit59 ; f23
r64 = reg unit60 ; f24
r65 = reg unit61 ; f25
r66 = reg unit62 ; f26
r67 = reg unit63 ; f27
r68 = reg unit64 ; f28
r69 = reg unit65 ; f29
r70 = reg unit66 ; f30
r71 = reg unit67 ; f31
r72 = stack unit68 ; f_stack0
r73 = stack unit69 ; f_stack1
r74 = stack unit70 ; f_stack2
r75 = stack unit71 ; f_stack3
r76 = stack unit72 ; f_stack4
r77 = stack unit73 ; f_stack5
r78 = stack unit74 ; f_stack6
r79 = stack unit75 ; f_stack7
r80 = reg unit76 ; v0
r81 = reg unit77 ; v1
r82 = reg unit78 ; v2
r83 = reg unit79 ; v3
r84 = reg unit80 ; v4
r85 = reg unit81 ; v5
r86 = reg unit82 ; v6
r87 = reg unit83 ; v7
r88 = reg unit84 ; v8
r89 = reg unit85 ; v9
r90 = reg unit86 ; v10
r91 = reg unit87 ; v11
r92 = reg unit88 ; v12
r93 = reg unit89 ; v13
r94 = reg unit90 ; v14
r95 = reg unit91 ; v15
r96 = reg unit92 ; v16
r97 = reg unit93 ; v17
r98 = reg unit94 ; v18
r99 = reg unit95 ; v19
r100 = reg unit96 ; v20
r101 = reg unit97 ; v21
r102 = reg unit98 ; v22
r103 = reg unit99 ; v23
r104 = reg unit100 ; v24
r105 = reg unit101 ; v25
r106 = reg unit102 ; v26
r107 = reg unit103 ; v27
r108 = reg unit104 ; v28
r109 = reg unit105 ; v29
r110 = reg unit106 ; v30
r111 = reg unit107 ; v31
r112 = stack unit108 ; v_stack0
r113 = stack unit109 ; v_stack1
r114 = stack unit110 ; v_stack2
r115 = stack unit111 ; v_stack3
r116 = stack unit112 ; v_stack4
r117 = stack unit113 ; v_stack5
r118 = stack unit114 ; v_stack6
r119 = stack unit115 ; v_stack7
r120 = reg unit76 unit77 ; v0_x2
r121 = reg unit78 unit79 ; v2_x2
r122 = reg unit80 unit81 ; v4_x2
r123 = reg unit82 unit83 ; v6_x2
r124 = reg unit84 unit85 ; v8_x2
r125 = reg unit86 unit87 ; v10_x2
r126 = reg unit88 unit89 ; v12_x2
r127 = reg unit90 unit91 ; v14_x2
r128 = reg unit92 unit93 ; v16_x2
r129 = reg unit94 unit95 ; v18_x2
r130 = reg unit96 unit97 ; v20_x2
r131 = reg unit98 unit99 ; v22_x2
r132 = reg unit100 unit101 ; v24_x2
r133 = reg unit102 unit103 ; v26_x2
r134 = reg unit104 unit105 ; v28_x2
r135 = reg unit106 unit107 ; v30_x2
r136 = stack unit116 ; v_stack0_x2
r137 = stack unit117 ; v_stack1_x2
r138 = stack unit118 ; v_stack2_x2
r139 = stack unit119 ; v_stack3_x2
r140 = stack unit120 ; v_stack4_x2
r141 = stack unit121 ; v_stack5_x2
r142 = stack unit122 ; v_stack6_x2
r143 = stack unit123 ; v_stack7_x2
r144 = reg unit76 unit77 unit78 unit79 ; v0_x4
r145 = reg unit80 unit81 unit82 unit83 ; v4_x4
r146 = reg unit84 unit85 unit86 unit87 ; v8_x4
r147 = reg unit88 unit89 unit90 unit91 ; v12_x4
r148 = reg unit92 unit93 unit94 unit95 ; v16_x4
r149 = reg unit96 unit97 unit98 unit99 ; v20_x4
r150 = reg unit100 unit101 unit102 unit103 ; v24_x4
r151 = reg unit104 unit105 unit106 unit107 ; v28_x4
r152 = stack unit124 ; v_stack0_x4
r153 = stack unit125 ; v_stack1_x4
r154 = stack unit126 ; v_stack2_x4
r155 = stack unit127 ; v_stack3_x4
r156 = stack unit128 ; v_stack4_x4
r157 = stack unit129 ; v_stack5_x4
r158 = stack unit130 ; v_stack6_x4
r159 = stack unit131 ; v_stack7_x4
r160 = reg unit76 unit77 unit78 unit79 unit80 unit81 unit82 unit83 ; v0_x8
r161 = reg unit84 unit85 unit86 unit87 unit88 unit89 unit90 unit91 ; v8_x8
r162 = reg unit92 unit93 unit94 unit95 unit96 unit97 unit98 unit99 ; v16_x8
r163 = reg unit100 unit101 unit102 unit103 unit104 unit105 unit106 unit107 ; v24_x8
r164 = stack unit132 ; v_stack0_x8
r165 = stack unit133 ; v_stack1_x8
r166 = stack unit134 ; v_stack2_x8
r167 = stack unit135 ; v_stack3_x8
r168 = stack unit136 ; v_stack4_x8
r169 = stack unit137 ; v_stack5_x8
r170 = stack unit138 ; v_stack6_x8
r171 = stack unit139 ; v_stack7_x8

rg0 = r6 r7 ; (x6 x7)
rg1 = r8 r9 ; (x8 x9)
rg2 = r10 r11 ; (x10 x11)
rg3 = r12 r13 ; (x12 x13)
rg4 = r14 r15 ; (x14 x15)
rg5 = r16 r17 ; (x16 x17)
rg6 = r18 r19 ; (x18 x19)
rg7 = r20 r21 ; (x20 x21)
rg8 = r22 r23 ; (x22 x23)
rg9 = r24 r25 ; (x24 x25)
rg10 = r26 r27 ; (x26 x27)
rg11 = r28 r29 ; (x28 x29)
rg12 = r30 r31 ; (x30 x31)
rg13 = r80 r81 ; (v0 v1)
rg14 = r81 r82 ; (v1 v2)
rg15 = r82 r83 ; (v2 v3)
rg16 = r83 r84 ; (v3 v4)
rg17 = r84 r85 ; (v4 v5)
rg18 = r85 r86 ; (v5 v6)
rg19 = r86 r87 ; (v6 v7)
rg20 = r87 r88 ; (v7 v8)
rg21 = r88 r89 ; (v8 v9)
rg22 = r89 r90 ; (v9 v10)
rg23 = r90 r91 ; (v10 v11)
rg24 = r91 r92 ; (v11 v12)
rg25 = r92 r93 ; (v12 v13)
rg26 = r93 r94 ; (v13 v14)
rg27 = r94 r95 ; (v14 v15)
rg28 = r95 r96 ; (v15 v16)
rg29 = r96 r97 ; (v16 v17)
rg30 = r97 r98 ; (v17 v18)
rg31 = r98 r99 ; (v18 v19)
rg32 = r99 r100 ; (v19 v20)
rg33 = r100 r101 ; (v20 v21)
rg34 = r101 r102 ; (v21 v22)
rg35 = r102 r103 ; (v22 v23)
rg36 = r103 r104 ; (v23 v24)
rg37 = r104 r105 ; (v24 v25)
rg38 = r105 r106 ; (v25 v26)
rg39 = r106 r107 ; (v26 v27)
rg40 = r107 r108 ; (v27 v28)
rg41 = r108 r109 ; (v28 v29)
rg42 = r109 r110 ; (v29 v30)
rg43 = r110 r111 ; (v30 v31)
rg44 = r80 r81 r82 ; (v0 v1 v2)
rg45 = r81 r82 r83 ; (v1 v2 v3)
rg46 = r82 r83 r84 ; (v2 v3 v4)
rg47 = r83 r84 r85 ; (v3 v4 v5)
rg48 = r84 r85 r86 ; (v4 v5 v6)
rg49 = r85 r86 r87 ; (v5 v6 v7)
rg50 = r86 r87 r88 ; (v6 v7 v8)
rg51 = r87 r88 r89 ; (v7 v8 v9)
rg52 = r88 r89 r90 ; (v8 v9 v10)
rg53 = r89 r90 r91 ; (v9 v10 v11)
rg54 = r90 r91 r92 ; (v10 v11 v12)
rg55 = r91 r92 r93 ; (v11 v12 v13)
rg56 = r92 r93 r94 ; (v12 v13 v14)
rg57 = r93 r94 r95 ; (v13 v14 v15)
rg58 = r94 r95 r96 ; (v14 v15 v16)
rg59 = r95 r96 r97 ; (v15 v16 v17)
rg60 = r96 r97 r98 ; (v16 v17 v18)
rg61 = r97 r98 r99 ; (v17 v18 v19)
rg62 = r98 r99 r100 ; (v18 v19 v20)
rg63 = r99 r100 r101 ; (v19 v20 v21)
rg64 = r100 r101 r102 ; (v20 v21 v22)
rg65 = r101 r102 r103 ; (v21 v22 v23)
rg66 = r102 r103 r104 ; (v22 v23 v24)
rg67 = r103 r104 r105 ; (v23 v24 v25)
rg68 = r104 r105 r106 ; (v24 v25 v26)
rg69 = r105 r106 r107 ; (v25 v26 v27)
rg70 = r106 r107 r108 ; (v26 v27 v28)
rg71 = r107 r108 r109 ; (v27 v28 v29)
rg72 = r108 r109 r110 ; (v28 v29 v30)
rg73 = r109 r110 r111 ; (v29 v30 v31)
rg74 = r80 r81 r82 r83 ; (v0 v1 v2 v3)
rg75 = r81 r82 r83 r84 ; (v1 v2 v3 v4)
rg76 = r82 r83 r84 r85 ; (v2 v3 v4 v5)
rg77 = r83 r84 r85 r86 ; (v3 v4 v5 v6)
rg78 = r84 r85 r86 r87 ; (v4 v5 v6 v7)
rg79 = r85 r86 r87 r88 ; (v5 v6 v7 v8)
rg80 = r86 r87 r88 r89 ; (v6 v7 v8 v9)
rg81 = r87 r88 r89 r90 ; (v7 v8 v9 v10)
rg82 = r88 r89 r90 r91 ; (v8 v9 v10 v11)
rg83 = r89 r90 r91 r92 ; (v9 v10 v11 v12)
rg84 = r90 r91 r92 r93 ; (v10 v11 v12 v13)
rg85 = r91 r92 r93 r94 ; (v11 v12 v13 v14)
rg86 = r92 r93 r94 r95 ; (v12 v13 v14 v15)
rg87 = r93 r94 r95 r96 ; (v13 v14 v15 v16)
rg88 = r94 r95 r96 r97 ; (v14 v15 v16 v17)
rg89 = r95 r96 r97 r98 ; (v15 v16 v17 v18)
rg90 = r96 r97 r98 r99 ; (v16 v17 v18 v19)
rg91 = r97 r98 r99 r100 ; (v17 v18 v19 v20)
rg92 = r98 r99 r100 r101 ; (v18 v19 v20 v21)
rg93 = r99 r100 r101 r102 ; (v19 v20 v21 v22)
rg94 = r100 r101 r102 r103 ; (v20 v21 v22 v23)
rg95 = r101 r102 r103 r104 ; (v21 v22 v23 v24)
rg96 = r102 r103 r104 r105 ; (v22 v23 v24 v25)
rg97 = r103 r104 r105 r106 ; (v23 v24 v25 v26)
rg98 = r104 r105 r106 r107 ; (v24 v25 v26 v27)
rg99 = r105 r106 r107 r108 ; (v25 v26 v27 v28)
rg100 = r106 r107 r108 r109 ; (v26 v27 v28 v29)
rg101 = r107 r108 r109 r110 ; (v27 v28 v29 v30)
rg102 = r108 r109 r110 r111 ; (v28 v29 v30 v31)
rg103 = r80 r81 r82 r83 r84 ; (v0 v1 v2 v3 v4)
rg104 = r81 r82 r83 r84 r85 ; (v1 v2 v3 v4 v5)
rg105 = r82 r83 r84 r85 r86 ; (v2 v3 v4 v5 v6)
rg106 = r83 r84 r85 r86 r87 ; (v3 v4 v5 v6 v7)
rg107 = r84 r85 r86 r87 r88 ; (v4 v5 v6 v7 v8)
rg108 = r85 r86 r87 r88 r89 ; (v5 v6 v7 v8 v9)
rg109 = r86 r87 r88 r89 r90 ; (v6 v7 v8 v9 v10)
rg110 = r87 r88 r89 r90 r91 ; (v7 v8 v9 v10 v11)
rg111 = r88 r89 r90 r91 r92 ; (v8 v9 v10 v11 v12)
rg112 = r89 r90 r91 r92 r93 ; (v9 v10 v11 v12 v13)
rg113 = r90 r91 r92 r93 r94 ; (v10 v11 v12 v13 v14)
rg114 = r91 r92 r93 r94 r95 ; (v11 v12 v13 v14 v15)
rg115 = r92 r93 r94 r95 r96 ; (v12 v13 v14 v15 v16)
rg116 = r93 r94 r95 r96 r97 ; (v13 v14 v15 v16 v17)
rg117 = r94 r95 r96 r97 r98 ; (v14 v15 v16 v17 v18)
rg118 = r95 r96 r97 r98 r99 ; (v15 v16 v17 v18 v19)
rg119 = r96 r97 r98 r99 r100 ; (v16 v17 v18 v19 v20)
rg120 = r97 r98 r99 r100 r101 ; (v17 v18 v19 v20 v21)
rg121 = r98 r99 r100 r101 r102 ; (v18 v19 v20 v21 v22)
rg122 = r99 r100 r101 r102 r103 ; (v19 v20 v21 v22 v23)
rg123 = r100 r101 r102 r103 r104 ; (v20 v21 v22 v23 v24)
rg124 = r101 r102 r103 r104 r105 ; (v21 v22 v23 v24 v25)
rg125 = r102 r103 r104 r105 r106 ; (v22 v23 v24 v25 v26)
rg126 = r103 r104 r105 r106 r107 ; (v23 v24 v25 v26 v27)
rg127 = r104 r105 r106 r107 r108 ; (v24 v25 v26 v27 v28)
rg128 = r105 r106 r107 r108 r109 ; (v25 v26 v27 v28 v29)
rg129 = r106 r107 r108 r109 r110 ; (v26 v27 v28 v29 v30)
rg130 = r107 r108 r109 r110 r111 ; (v27 v28 v29 v30 v31)
rg131 = r80 r81 r82 r83 r84 r85 ; (v0 v1 v2 v3 v4 v5)
rg132 = r81 r82 r83 r84 r85 r86 ; (v1 v2 v3 v4 v5 v6)
rg133 = r82 r83 r84 r85 r86 r87 ; (v2 v3 v4 v5 v6 v7)
rg134 = r83 r84 r85 r86 r87 r88 ; (v3 v4 v5 v6 v7 v8)
rg135 = r84 r85 r86 r87 r88 r89 ; (v4 v5 v6 v7 v8 v9)
rg136 = r85 r86 r87 r88 r89 r90 ; (v5 v6 v7 v8 v9 v10)
rg137 = r86 r87 r88 r89 r90 r91 ; (v6 v7 v8 v9 v10 v11)
rg138 = r87 r88 r89 r90 r91 r92 ; (v7 v8 v9 v10 v11 v12)
rg139 = r88 r89 r90 r91 r92 r93 ; (v8 v9 v10 v11 v12 v13)
rg140 = r89 r90 r91 r92 r93 r94 ; (v9 v10 v11 v12 v13 v14)
rg141 = r90 r91 r92 r93 r94 r95 ; (v10 v11 v12 v13 v14 v15)
rg142 = r91 r92 r93 r94 r95 r96 ; (v11 v12 v13 v14 v15 v16)
rg143 = r92 r93 r94 r95 r96 r97 ; (v12 v13 v14 v15 v16 v17)
rg144 = r93 r94 r95 r96 r97 r98 ; (v13 v14 v15 v16 v17 v18)
rg145 = r94 r95 r96 r97 r98 r99 ; (v14 v15 v16 v17 v18 v19)
rg146 = r95 r96 r97 r98 r99 r100 ; (v15 v16 v17 v18 v19 v20)
rg147 = r96 r97 r98 r99 r100 r101 ; (v16 v17 v18 v19 v20 v21)
rg148 = r97 r98 r99 r100 r101 r102 ; (v17 v18 v19 v20 v21 v22)
rg149 = r98 r99 r100 r101 r102 r103 ; (v18 v19 v20 v21 v22 v23)
rg150 = r99 r100 r101 r102 r103 r104 ; (v19 v20 v21 v22 v23 v24)
rg151 = r100 r101 r102 r103 r104 r105 ; (v20 v21 v22 v23 v24 v25)
rg152 = r101 r102 r103 r104 r105 r106 ; (v21 v22 v23 v24 v25 v26)
rg153 = r102 r103 r104 r105 r106 r107 ; (v22 v23 v24 v25 v26 v27)
rg154 = r103 r104 r105 r106 r107 r108 ; (v23 v24 v25 v26 v27 v28)
rg155 = r104 r105 r106 r107 r108 r109 ; (v24 v25 v26 v27 v28 v29)
rg156 = r105 r106 r107 r108 r109 r110 ; (v25 v26 v27 v28 v29 v30)
rg157 = r106 r107 r108 r109 r110 r111 ; (v26 v27 v28 v29 v30 v31)
rg158 = r80 r81 r82 r83 r84 r85 r86 ; (v0 v1 v2 v3 v4 v5 v6)
rg159 = r81 r82 r83 r84 r85 r86 r87 ; (v1 v2 v3 v4 v5 v6 v7)
rg160 = r82 r83 r84 r85 r86 r87 r88 ; (v2 v3 v4 v5 v6 v7 v8)
rg161 = r83 r84 r85 r86 r87 r88 r89 ; (v3 v4 v5 v6 v7 v8 v9)
rg162 = r84 r85 r86 r87 r88 r89 r90 ; (v4 v5 v6 v7 v8 v9 v10)
rg163 = r85 r86 r87 r88 r89 r90 r91 ; (v5 v6 v7 v8 v9 v10 v11)
rg164 = r86 r87 r88 r89 r90 r91 r92 ; (v6 v7 v8 v9 v10 v11 v12)
rg165 = r87 r88 r89 r90 r91 r92 r93 ; (v7 v8 v9 v10 v11 v12 v13)
rg166 = r88 r89 r90 r91 r92 r93 r94 ; (v8 v9 v10 v11 v12 v13 v14)
rg167 = r89 r90 r91 r92 r93 r94 r95 ; (v9 v10 v11 v12 v13 v14 v15)
rg168 = r90 r91 r92 r93 r94 r95 r96 ; (v10 v11 v12 v13 v14 v15 v16)
rg169 = r91 r92 r93 r94 r95 r96 r97 ; (v11 v12 v13 v14 v15 v16 v17)
rg170 = r92 r93 r94 r95 r96 r97 r98 ; (v12 v13 v14 v15 v16 v17 v18)
rg171 = r93 r94 r95 r96 r97 r98 r99 ; (v13 v14 v15 v16 v17 v18 v19)
rg172 = r94 r95 r96 r97 r98 r99 r100 ; (v14 v15 v16 v17 v18 v19 v20)
rg173 = r95 r96 r97 r98 r99 r100 r101 ; (v15 v16 v17 v18 v19 v20 v21)
rg174 = r96 r97 r98 r99 r100 r101 r102 ; (v16 v17 v18 v19 v20 v21 v22)
rg175 = r97 r98 r99 r100 r101 r102 r103 ; (v17 v18 v19 v20 v21 v22 v23)
rg176 = r98 r99 r100 r101 r102 r103 r104 ; (v18 v19 v20 v21 v22 v23 v24)
rg177 = r99 r100 r101 r102 r103 r104 r105 ; (v19 v20 v21 v22 v23 v24 v25)
rg178 = r100 r101 r102 r103 r104 r105 r106 ; (v20 v21 v22 v23 v24 v25 v26)
rg179 = r101 r102 r103 r104 r105 r106 r107 ; (v21 v22 v23 v24 v25 v26 v27)
rg180 = r102 r103 r104 r105 r106 r107 r108 ; (v22 v23 v24 v25 v26 v27 v28)
rg181 = r103 r104 r105 r106 r107 r108 r109 ; (v23 v24 v25 v26 v27 v28 v29)
rg182 = r104 r105 r106 r107 r108 r109 r110 ; (v24 v25 v26 v27 v28 v29 v30)
rg183 = r105 r106 r107 r108 r109 r110 r111 ; (v25 v26 v27 v28 v29 v30 v31)
rg184 = r80 r81 r82 r83 r84 r85 r86 r87 ; (v0 v1 v2 v3 v4 v5 v6 v7)
rg185 = r81 r82 r83 r84 r85 r86 r87 r88 ; (v1 v2 v3 v4 v5 v6 v7 v8)
rg186 = r82 r83 r84 r85 r86 r87 r88 r89 ; (v2 v3 v4 v5 v6 v7 v8 v9)
rg187 = r83 r84 r85 r86 r87 r88 r89 r90 ; (v3 v4 v5 v6 v7 v8 v9 v10)
rg188 = r84 r85 r86 r87 r88 r89 r90 r91 ; (v4 v5 v6 v7 v8 v9 v10 v11)
rg189 = r85 r86 r87 r88 r89 r90 r91 r92 ; (v5 v6 v7 v8 v9 v10 v11 v12)
rg190 = r86 r87 r88 r89 r90 r91 r92 r93 ; (v6 v7 v8 v9 v10 v11 v12 v13)
rg191 = r87 r88 r89 r90 r91 r92 r93 r94 ; (v7 v8 v9 v10 v11 v12 v13 v14)
rg192 = r88 r89 r90 r91 r92 r93 r94 r95 ; (v8 v9 v10 v11 v12 v13 v14 v15)
rg193 = r89 r90 r91 r92 r93 r94 r95 r96 ; (v9 v10 v11 v12 v13 v14 v15 v16)
rg194 = r90 r91 r92 r93 r94 r95 r96 r97 ; (v10 v11 v12 v13 v14 v15 v16 v17)
rg195 = r91 r92 r93 r94 r95 r96 r97 r98 ; (v11 v12 v13 v14 v15 v16 v17 v18)
rg196 = r92 r93 r94 r95 r96 r97 r98 r99 ; (v12 v13 v14 v15 v16 v17 v18 v19)
rg197 = r93 r94 r95 r96 r97 r98 r99 r100 ; (v13 v14 v15 v16 v17 v18 v19 v20)
rg198 = r94 r95 r96 r97 r98 r99 r100 r101 ; (v14 v15 v16 v17 v18 v19 v20 v21)
rg199 = r95 r96 r97 r98 r99 r100 r101 r102 ; (v15 v16 v17 v18 v19 v20 v21 v22)
rg200 = r96 r97 r98 r99 r100 r101 r102 r103 ; (v16 v17 v18 v19 v20 v21 v22 v23)
rg201 = r97 r98 r99 r100 r101 r102 r103 r104 ; (v17 v18 v19 v20 v21 v22 v23 v24)
rg202 = r98 r99 r100 r101 r102 r103 r104 r105 ; (v18 v19 v20 v21 v22 v23 v24 v25)
rg203 = r99 r100 r101 r102 r103 r104 r105 r106 ; (v19 v20 v21 v22 v23 v24 v25 v26)
rg204 = r100 r101 r102 r103 r104 r105 r106 r107 ; (v20 v21 v22 v23 v24 v25 v26 v27)
rg205 = r101 r102 r103 r104 r105 r106 r107 r108 ; (v21 v22 v23 v24 v25 v26 v27 v28)
rg206 = r102 r103 r104 r105 r106 r107 r108 r109 ; (v22 v23 v24 v25 v26 v27 v28 v29)
rg207 = r103 r104 r105 r106 r107 r108 r109 r110 ; (v23 v24 v25 v26 v27 v28 v29 v30)
rg208 = r104 r105 r106 r107 r108 r109 r110 r111 ; (v24 v25 v26 v27 v28 v29 v30 v31)
rg209 = r120 r121 ; (v0_x2 v2_x2)
rg210 = r121 r122 ; (v2_x2 v4_x2)
rg211 = r122 r123 ; (v4_x2 v6_x2)
rg212 = r123 r124 ; (v6_x2 v8_x2)
rg213 = r124 r125 ; (v8_x2 v10_x2)
rg214 = r125 r126 ; (v10_x2 v12_x2)
rg215 = r126 r127 ; (v12_x2 v14_x2)
rg216 = r127 r128 ; (v14_x2 v16_x2)
rg217 = r128 r129 ; (v16_x2 v18_x2)
rg218 = r129 r130 ; (v18_x2 v20_x2)
rg219 = r130 r131 ; (v20_x2 v22_x2)
rg220 = r131 r132 ; (v22_x2 v24_x2)
rg221 = r132 r133 ; (v24_x2 v26_x2)
rg222 = r133 r134 ; (v26_x2 v28_x2)
rg223 = r134 r135 ; (v28_x2 v30_x2)
rg224 = r120 r121 r122 ; (v0_x2 v2_x2 v4_x2)
rg225 = r121 r122 r123 ; (v2_x2 v4_x2 v6_x2)
rg226 = r122 r123 r124 ; (v4_x2 v6_x2 v8_x2)
rg227 = r123 r124 r125 ; (v6_x2 v8_x2 v10_x2)
rg228 = r124 r125 r126 ; (v8_x2 v10_x2 v12_x2)
rg229 = r125 r126 r127 ; (v10_x2 v12_x2 v14_x2)
rg230 = r126 r127 r128 ; (v12_x2 v14_x2 v16_x2)
rg231 = r127 r128 r129 ; (v14_x2 v16_x2 v18_x2)
rg232 = r128 r129 r130 ; (v16_x2 v18_x2 v20_x2)
rg233 = r129 r130 r131 ; (v18_x2 v20_x2 v22_x2)
rg234 = r130 r131 r132 ; (v20_x2 v22_x2 v24_x2)
rg235 = r131 r132 r133 ; (v22_x2 v24_x2 v26_x2)
rg236 = r132 r133 r134 ; (v24_x2 v26_x2 v28_x2)
rg237 = r133 r134 r135 ; (v26_x2 v28_x2 v30_x2)
rg238 = r120 r121 r122 r123 ; (v0_x2 v2_x2 v4_x2 v6_x2)
rg239 = r121 r122 r123 r124 ; (v2_x2 v4_x2 v6_x2 v8_x2)
rg240 = r122 r123 r124 r125 ; (v4_x2 v6_x2 v8_x2 v10_x2)
rg241 = r123 r124 r125 r126 ; (v6_x2 v8_x2 v10_x2 v12_x2)
rg242 = r124 r125 r126 r127 ; (v8_x2 v10_x2 v12_x2 v14_x2)
rg243 = r125 r126 r127 r128 ; (v10_x2 v12_x2 v14_x2 v16_x2)
rg244 = r126 r127 r128 r129 ; (v12_x2 v14_x2 v16_x2 v18_x2)
rg245 = r127 r128 r129 r130 ; (v14_x2 v16_x2 v18_x2 v20_x2)
rg246 = r128 r129 r130 r131 ; (v16_x2 v18_x2 v20_x2 v22_x2)
rg247 = r129 r130 r131 r132 ; (v18_x2 v20_x2 v22_x2 v24_x2)
rg248 = r130 r131 r132 r133 ; (v20_x2 v22_x2 v24_x2 v26_x2)
rg249 = r131 r132 r133 r134 ; (v22_x2 v24_x2 v26_x2 v28_x2)
rg250 = r132 r133 r134 r135 ; (v24_x2 v26_x2 v28_x2 v30_x2)
rg251 = r144 r145 ; (v0_x4 v4_x4)
rg252 = r145 r146 ; (v4_x4 v8_x4)
rg253 = r146 r147 ; (v8_x4 v12_x4)
rg254 = r147 r148 ; (v12_x4 v16_x4)
rg255 = r148 r149 ; (v16_x4 v20_x4)
rg256 = r149 r150 ; (v20_x4 v24_x4)
rg257 = r150 r151 ; (v24_x4 v28_x4)

; General-purpose registers
bank0 {
    top_level_class = class0
    stack_to_stack_class = class2
    spillslot_size = 8

    ; General-purpose registers + stack
    class0 {
        allows_spillslots
        spill_cost = 0.5
        members = r1 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 r32 r33 r34 r35 r36 r37 r38 r39
        allocation_order = r10 r11 r12 r13 r14 r15 r1 r5 r6 r7 r16 r17 r28 r29 r30 r31 r8 r9 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27
    }

    ; General-purpose stack only
    class1: class0 {
        allows_spillslots
        spill_cost = 0
        members = r32 r33 r34 r35 r36 r37 r38 r39
        allocation_order = 
    }

    ; General-purpose registers
    class2: class0 {
        spill_cost = 1
        members = r1 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31
        allocation_order = r10 r11 r12 r13 r14 r15 r1 r5 r6 r7 r16 r17 r28 r29 r30 r31 r8 r9 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27
    }

    ; Aligned register pairs for Zacas
    class3: class2 {
        group_size = 2
        spill_cost = 1
        members = rg0 rg1 rg2 rg3 rg4 rg5 rg6 rg7 rg8 rg9 rg10 rg11 rg12
        allocation_order = rg0 rg2 rg3 rg4 rg5 rg11 rg12 rg1 rg6 rg7 rg8 rg9 rg10
    }
}

; Float registers
bank1 {
    top_level_class = class4
    stack_to_stack_class = class6
    spillslot_size = 8

    ; Float registers + stack
    class4 {
        allows_spillslots
        spill_cost = 0.5
        members = r40 r41 r42 r43 r44 r45 r46 r47 r48 r49 r50 r51 r52 r53 r54 r55 r56 r57 r58 r59 r60 r61 r62 r63 r64 r65 r66 r67 r68 r69 r70 r71 r72 r73 r74 r75 r76 r77 r78 r79
        allocation_order = r50 r51 r52 r53 r54 r55 r40 r41 r42 r43 r44 r45 r46 r47 r56 r57 r68 r69 r70 r71 r48 r49 r58 r59 r60 r61 r62 r63 r64 r65 r66 r67
    }

    ; Float stack only
    class5: class4 {
        allows_spillslots
        spill_cost = 0
        members = r72 r73 r74 r75 r76 r77 r78 r79
        allocation_order = 
    }

    ; Float registers
    class6: class4 {
        spill_cost = 1
        members = r40 r41 r42 r43 r44 r45 r46 r47 r48 r49 r50 r51 r52 r53 r54 r55 r56 r57 r58 r59 r60 r61 r62 r63 r64 r65 r66 r67 r68 r69 r70 r71
        allocation_order = r50 r51 r52 r53 r54 r55 r40 r41 r42 r43 r44 r45 r46 r47 r56 r57 r68 r69 r70 r71 r48 r49 r58 r59 r60 r61 r62 r63 r64 r65 r66 r67
    }
}

; Vector registers LMUL=1
bank2 {
    top_level_class = class7
    stack_to_stack_class = class9
    spillslot_size = 16

    ; Vector registers + stack LMUL=1
    class7 {
        allows_spillslots
        spill_cost = 0.5
        members = r80 r81 r82 r83 r84 r85 r86 r87 r88 r89 r90 r91 r92 r93 r94 r95 r96 r97 r98 r99 r100 r101 r102 r103 r104 r105 r106 r107 r108 r109 r110 r111 r112 r113 r114 r115 r116 r117 r118 r119
        allocation_order = r80 r81 r82 r83 r84 r85 r86 r87 r88 r89 r90 r91 r92 r93 r94 r95 r96 r97 r98 r99 r100 r101 r102 r103 r104 r105 r106 r107 r108 r109 r110 r111
    }

    ; Vector stack only LMUL=1
    class8: class7 {
        allows_spillslots
        spill_cost = 0
        members = r112 r113 r114 r115 r116 r117 r118 r119
        allocation_order = 
    }

    ; Vector registers LMUL=1
    class9: class7 {
        spill_cost = 1
        members = r80 r81 r82 r83 r84 r85 r86 r87 r88 r89 r90 r91 r92 r93 r94 r95 r96 r97 r98 r99 r100 r101 r102 r103 r104 r105 r106 r107 r108 r109 r110 r111
        allocation_order = r80 r81 r82 r83 r84 r85 r86 r87 r88 r89 r90 r91 r92 r93 r94 r95 r96 r97 r98 r99 r100 r101 r102 r103 r104 r105 r106 r107 r108 r109 r110 r111
    }

    ; Vector register groups for 2 segment load/store LMUL=1
    class10: class9 {
        group_size = 2
        spill_cost = 1
        members = rg13 rg14 rg15 rg16 rg17 rg18 rg19 rg20 rg21 rg22 rg23 rg24 rg25 rg26 rg27 rg28 rg29 rg30 rg31 rg32 rg33 rg34 rg35 rg36 rg37 rg38 rg39 rg40 rg41 rg42 rg43
        allocation_order = rg13 rg14 rg15 rg16 rg17 rg18 rg19 rg20 rg21 rg22 rg23 rg24 rg25 rg26 rg27 rg28 rg29 rg30 rg31 rg32 rg33 rg34 rg35 rg36 rg37 rg38 rg39 rg40 rg41 rg42 rg43
    }

    ; Vector register groups for 3 segment load/store LMUL=1
    class11: class9 {
        group_size = 3
        spill_cost = 1
        members = rg44 rg45 rg46 rg47 rg48 rg49 rg50 rg51 rg52 rg53 rg54 rg55 rg56 rg57 rg58 rg59 rg60 rg61 rg62 rg63 rg64 rg65 rg66 rg67 rg68 rg69 rg70 rg71 rg72 rg73
        allocation_order = rg44 rg45 rg46 rg47 rg48 rg49 rg50 rg51 rg52 rg53 rg54 rg55 rg56 rg57 rg58 rg59 rg60 rg61 rg62 rg63 rg64 rg65 rg66 rg67 rg68 rg69 rg70 rg71 rg72 rg73
    }

    ; Vector register groups for 4 segment load/store LMUL=1
    class12: class9 {
        group_size = 4
        spill_cost = 1
        members = rg74 rg75 rg76 rg77 rg78 rg79 rg80 rg81 rg82 rg83 rg84 rg85 rg86 rg87 rg88 rg89 rg90 rg91 rg92 rg93 rg94 rg95 rg96 rg97 rg98 rg99 rg100 rg101 rg102
        allocation_order = rg74 rg75 rg76 rg77 rg78 rg79 rg80 rg81 rg82 rg83 rg84 rg85 rg86 rg87 rg88 rg89 rg90 rg91 rg92 rg93 rg94 rg95 rg96 rg97 rg98 rg99 rg100 rg101 rg102
    }

    ; Vector register groups for 5 segment load/store LMUL=1
    class13: class9 {
        group_size = 5
        spill_cost = 1
        members = rg103 rg104 rg105 rg106 rg107 rg108 rg109 rg110 rg111 rg112 rg113 rg114 rg115 rg116 rg117 rg118 rg119 rg120 rg121 rg122 rg123 rg124 rg125 rg126 rg127 rg128 rg129 rg130
        allocation_order = rg103 rg104 rg105 rg106 rg107 rg108 rg109 rg110 rg111 rg112 rg113 rg114 rg115 rg116 rg117 rg118 rg119 rg120 rg121 rg122 rg123 rg124 rg125 rg126 rg127 rg128 rg129 rg130
    }

    ; Vector register groups for 6 segment load/store LMUL=1
    class14: class9 {
        group_size = 6
        spill_cost = 1
        members = rg131 rg132 rg133 rg134 rg135 rg136 rg137 rg138 rg139 rg140 rg141 rg142 rg143 rg144 rg145 rg146 rg147 rg148 rg149 rg150 rg151 rg152 rg153 rg154 rg155 rg156 rg157
        allocation_order = rg131 rg132 rg133 rg134 rg135 rg136 rg137 rg138 rg139 rg140 rg141 rg142 rg143 rg144 rg145 rg146 rg147 rg148 rg149 rg150 rg151 rg152 rg153 rg154 rg155 rg156 rg157
    }

    ; Vector register groups for 7 segment load/store LMUL=1
    class15: class9 {
        group_size = 7
        spill_cost = 1
        members = rg158 rg159 rg160 rg161 rg162 rg163 rg164 rg165 rg166 rg167 rg168 rg169 rg170 rg171 rg172 rg173 rg174 rg175 rg176 rg177 rg178 rg179 rg180 rg181 rg182 rg183
        allocation_order = rg158 rg159 rg160 rg161 rg162 rg163 rg164 rg165 rg166 rg167 rg168 rg169 rg170 rg171 rg172 rg173 rg174 rg175 rg176 rg177 rg178 rg179 rg180 rg181 rg182 rg183
    }

    ; Vector register groups for 8 segment load/store LMUL=1
    class16: class9 {
        group_size = 8
        spill_cost = 1
        members = rg184 rg185 rg186 rg187 rg188 rg189 rg190 rg191 rg192 rg193 rg194 rg195 rg196 rg197 rg198 rg199 rg200 rg201 rg202 rg203 rg204 rg205 rg206 rg207 rg208
        allocation_order = rg184 rg185 rg186 rg187 rg188 rg189 rg190 rg191 rg192 rg193 rg194 rg195 rg196 rg197 rg198 rg199 rg200 rg201 rg202 rg203 rg204 rg205 rg206 rg207 rg208
    }
}

; Vector registers LMUL=2
bank3 {
    top_level_class = class17
    stack_to_stack_class = class19
    spillslot_size = 32

    ; Vector registers + stack LMUL=2
    class17 {
        allows_spillslots
        spill_cost = 0.5
        members = r120 r121 r122 r123 r124 r125 r126 r127 r128 r129 r130 r131 r132 r133 r134 r135 r136 r137 r138 r139 r140 r141 r142 r143
        allocation_order = r120 r121 r122 r123 r124 r125 r126 r127 r128 r129 r130 r131 r132 r133 r134 r135
    }

    ; Vector stack only LMUL=2
    class18: class17 {
        allows_spillslots
        spill_cost = 0
        members = r136 r137 r138 r139 r140 r141 r142 r143
        allocation_order = 
    }

    ; Vector registers LMUL=2
    class19: class17 {
        spill_cost = 1
        members = r120 r121 r122 r123 r124 r125 r126 r127 r128 r129 r130 r131 r132 r133 r134 r135
        allocation_order = r120 r121 r122 r123 r124 r125 r126 r127 r128 r129 r130 r131 r132 r133 r134 r135
    }

    ; Vector register groups for 2 segment load/store LMUL=2
    class20: class19 {
        group_size = 2
        spill_cost = 1
        members = rg209 rg210 rg211 rg212 rg213 rg214 rg215 rg216 rg217 rg218 rg219 rg220 rg221 rg222 rg223
        allocation_order = rg209 rg210 rg211 rg212 rg213 rg214 rg215 rg216 rg217 rg218 rg219 rg220 rg221 rg222 rg223
    }

    ; Vector register groups for 3 segment load/store LMUL=2
    class21: class19 {
        group_size = 3
        spill_cost = 1
        members = rg224 rg225 rg226 rg227 rg228 rg229 rg230 rg231 rg232 rg233 rg234 rg235 rg236 rg237
        allocation_order = rg224 rg225 rg226 rg227 rg228 rg229 rg230 rg231 rg232 rg233 rg234 rg235 rg236 rg237
    }

    ; Vector register groups for 4 segment load/store LMUL=2
    class22: class19 {
        group_size = 4
        spill_cost = 1
        members = rg238 rg239 rg240 rg241 rg242 rg243 rg244 rg245 rg246 rg247 rg248 rg249 rg250
        allocation_order = rg238 rg239 rg240 rg241 rg242 rg243 rg244 rg245 rg246 rg247 rg248 rg249 rg250
    }
}

; Vector registers LMUL=4
bank4 {
    top_level_class = class23
    stack_to_stack_class = class25
    spillslot_size = 64

    ; Vector registers + stack LMUL=4
    class23 {
        allows_spillslots
        spill_cost = 0.5
        members = r144 r145 r146 r147 r148 r149 r150 r151 r152 r153 r154 r155 r156 r157 r158 r159
        allocation_order = r144 r145 r146 r147 r148 r149 r150 r151
    }

    ; Vector stack only LMUL=4
    class24: class23 {
        allows_spillslots
        spill_cost = 0
        members = r152 r153 r154 r155 r156 r157 r158 r159
        allocation_order = 
    }

    ; Vector registers LMUL=4
    class25: class23 {
        spill_cost = 1
        members = r144 r145 r146 r147 r148 r149 r150 r151
        allocation_order = r144 r145 r146 r147 r148 r149 r150 r151
    }

    ; Vector register groups for 2 segment load/store LMUL=4
    class26: class25 {
        group_size = 2
        spill_cost = 1
        members = rg251 rg252 rg253 rg254 rg255 rg256 rg257
        allocation_order = rg251 rg252 rg253 rg254 rg255 rg256 rg257
    }
}

; Vector registers LMUL=8
bank5 {
    top_level_class = class27
    stack_to_stack_class = class29
    spillslot_size = 128

    ; Vector registers + stack LMUL=8
    class27 {
        allows_spillslots
        spill_cost = 0.5
        members = r160 r161 r162 r163 r164 r165 r166 r167 r168 r169 r170 r171
        allocation_order = r160 r161 r162 r163
    }

    ; Vector stack only LMUL=8
    class28: class27 {
        allows_spillslots
        spill_cost = 0
        members = r164 r165 r166 r167 r168 r169 r170 r171
        allocation_order = 
    }

    ; Vector registers LMUL=8
    class29: class27 {
        spill_cost = 1
        members = r160 r161 r162 r163
        allocation_order = r160 r161 r162 r163
    }
}
